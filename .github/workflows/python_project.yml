name: Python Application

on:
#  push:
 #   branches:
  #    - main
      
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  python_project:
    if: ${{ github.event.inputs.environment == 'prod' }}
    runs-on: self-hosted
   

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
  
          
      - name: Running Python Project
        run: |
          make setup
        # make testp
        #  make lint
        #  make coverage
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
      - name: Start Docker daemon
        run: |
          sudo dockerd > /tmp/dockerd.log 2>&1 &
          sleep 20
      
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Get latest tag
        run: |
         git fetch --tags
         LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
         echo "Latest tag is $LATEST_TAG"
         echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

       
        
          
      # 3️⃣ Build Docker image
      - name: Build Docker image and push to docker hub
        run: | 
          docker build -t myapp:$LATEST_TAG .
          docker tag myapp:$LATEST_TAG ${{ secrets.DOCKER_USERNAME }}/myapp:$LATEST_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:$LATEST_TAG

       # 4️⃣ Run container (optional: for testing)
      - name: Run Docker container
        run: docker run --rm myapp:$LATEST_TAG
          
